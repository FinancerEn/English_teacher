import asyncio
import os
import json
from datetime import datetime, time, timedelta
from typing import Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

from aiogram.types import FSInputFile
from database.engine import session_maker
from database.models import User, Topic, MessageHistory
from sqlalchemy import select, update
from ai.ai import openai_client
from speech.whisper_engine import generate_speech, save_audio_to_file
from text.text import scheduled_lesson_text, homework_reminder_text, buttons_info_text
from kbds.inline import get_lesson_buttons_keyboard

load_dotenv()

class LessonScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    """
    
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.timezone = os.getenv("TIMEZONE", "Asia/Shanghai")  # UTC+8
        self.lesson_time = os.getenv("LESSON_TIME", "12:00")
        self.group_id = os.getenv("GROUP_ID")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        self.test_mode = os.getenv("TEST_MODE", "false").lower() == "true"
        self.test_interval_minutes = int(os.getenv("TEST_INTERVAL_MINUTES", "960"))
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É—Ä–æ–∫–∞
        hour, minute = map(int, self.lesson_time.split(":"))
        self.lesson_time_obj = time(hour, minute)
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É—Ä–æ–∫–æ–≤...")
        
        if self.test_mode:
            print(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∫–∞–∂–¥—ã–µ {self.test_interval_minutes} –º–∏–Ω—É—Ç")
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç)
            # –£–±–∏—Ä–∞–µ–º send_lesson_reminder –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –æ–Ω –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
            self.scheduler.add_job(
                self.send_reinforcement_question,
                'interval',
                minutes=self.test_interval_minutes,
                id="reinforcement_question",
                name=f"–í–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {self.test_interval_minutes} –º–∏–Ω—É—Ç",
                replace_existing=True
            )
        else:
            print(f"‚è∞ –í—Ä–µ–º—è —É—Ä–æ–∫–∞: {self.lesson_time} ({self.timezone})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
            self.scheduler.add_job(
                self.send_lesson_reminder,
                CronTrigger(
                    day_of_week='mon-fri',
                    hour=self.lesson_time_obj.hour, 
                    minute=self.lesson_time_obj.minute, 
                    timezone=self.timezone
                ),
                id="daily_lesson",
                name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–ø–Ω-–ø—Ç)",
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç)
            self.scheduler.add_job(
                self.send_reinforcement_question,
                'interval',
                minutes=self.test_interval_minutes,
                id="reinforcement_question",
                name=f"–í–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {self.test_interval_minutes} –º–∏–Ω—É—Ç",
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–ø—è—Ç–Ω–∏—Ü–∞ 18:00)
            self.scheduler.add_job(
                self.send_weekly_homework,
                CronTrigger(
                    day_of_week='fri',
                    hour=18, 
                    minute=0, 
                    timezone=self.timezone
                ),
                id="weekly_homework",
                name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø—è—Ç–Ω–∏—Ü–∞ 18:00)",
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 12:00)
            self.scheduler.add_job(
                self.start_new_week_topic,
                CronTrigger(
                    day_of_week='mon',
                    hour=12, 
                    minute=0, 
                    timezone=self.timezone
                ),
                id="new_week_topic",
                name="–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 12:00)",
                replace_existing=True
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    
    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        """
        if self.scheduler.running:
            self.scheduler.shutdown()
            print("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def send_lesson_reminder(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        """
        try:
            print(f"üìö –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —É—Ä–æ–∫–µ –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        last_messages_result = await session.execute(
                            select(MessageHistory)
                            .where(MessageHistory.user_id == user.id)
                            .order_by(MessageHistory.timestamp.desc())
                            .limit(3)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                        )
                        last_messages = last_messages_result.scalars().all()
                        
                        if last_messages:
                            last_message = last_messages[0]
                            time_diff = datetime.now() - last_message.timestamp
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                            has_ending_message = False
                            for msg in last_messages:
                                if (msg.role == 'bot' and 
                                    any(phrase in msg.content.lower() for phrase in [
                                        '–ø–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä',
                                        '–∫–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å',
                                        '–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä',
                                        '–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                        'üèÅ'
                                    ])):
                                    has_ending_message = True
                                    break
                            
                            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –ò –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if time_diff.total_seconds() < 600 and not has_ending_message:  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                                print(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {time_diff.total_seconds():.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥)")
                                continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        next_topic = await self._get_next_topic_for_user(session, user)
                        
                        if next_topic:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
                            try:
                                lesson_text = await openai_client.generate_lesson_start_message(
                                    topic_title=next_topic.title,
                                    topic_description=next_topic.description
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI: {e}")
                                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                                lesson_text = f"Hello! üëã My name is Marcus. Ready to learn about {next_topic.title}? Let's start our English lesson! (–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—É '{next_topic.title}'? –ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!)"
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞
                            try:
                                topic_tasks = json.loads(next_topic.tasks) if next_topic.tasks else []
                                task_text = await openai_client.generate_lesson_task(
                                    topic_title=next_topic.title,
                                    topic_description=next_topic.description,
                                    topic_tasks=topic_tasks
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI: {e}")
                                # Fallback –∑–∞–¥–∞–Ω–∏–µ
                                if topic_tasks and len(topic_tasks) > 0:
                                    task_text = topic_tasks[0]
                                else:
                                    task_text = f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–µ '{next_topic.title}' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user.current_topic_id = next_topic.id
                            await session.commit()
                        else:
                            # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                            lesson_text = "üéâ Congratulations! You've completed all topics! You're doing great! (–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!)"
                        
                        try:
                            audio_bytes = await generate_speech(lesson_text)
                            if audio_bytes:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
                                audio_path = await save_audio_to_file(audio_bytes, f"lesson_reminder_{user.id}.mp3")
                                if audio_path:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    await self.bot.send_voice(
                                        chat_id=user.id,
                                        voice=FSInputFile(audio_path),
                                        caption=lesson_text
                                    )
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(audio_path)
                                    except:
                                        pass
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                    await self.bot.send_message(
                                        chat_id=user.id,
                                        text=lesson_text
                                    )
                            else:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                await self.bot.send_message(
                                    chat_id=user.id,
                                    text=lesson_text
                                )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=lesson_text
                            )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                        from text.text import lesson_task_text
                        if next_topic:
                            task_message = lesson_task_text.format(task_text=task_text)
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=task_message
                            )
                        
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_lesson_reminder: {e}")

    async def send_reinforcement_question(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è
        """
        try:
            print(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        last_messages_result = await session.execute(
                            select(MessageHistory)
                            .where(MessageHistory.user_id == user.id)
                            .order_by(MessageHistory.timestamp.desc())
                            .limit(3)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                        )
                        last_messages = last_messages_result.scalars().all()
                        
                        if last_messages:
                            last_message = last_messages[0]
                            time_diff = datetime.now() - last_message.timestamp
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                            has_ending_message = False
                            for msg in last_messages:
                                if (msg.role == 'bot' and 
                                    any(phrase in msg.content.lower() for phrase in [
                                        '–ø–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä',
                                        '–∫–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å',
                                        '–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä',
                                        '–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                        'üèÅ'
                                    ])):
                                    has_ending_message = True
                                    break
                            
                            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –ò –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if time_diff.total_seconds() < 600 and not has_ending_message:  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                                print(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {time_diff.total_seconds():.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥)")
                                continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è
                        today_topic = await self._get_today_topic_for_user(session, user)
                        
                        if today_topic:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
                            try:
                                question = await self._generate_reinforcement_question(today_topic)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
                                # Fallback –≤–æ–ø—Ä–æ—Å
                                question = f"What do you think about {today_topic.title}?"
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=f"üí≠ –í–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n\n{question}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç!")
                            
                            print(f"‚úÖ –í–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                        else:
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑—É—á–∞–ª —Ç–µ–º—É —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            print(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –∏–∑—É—á–∞–ª —Ç–µ–º—É —Å–µ–≥–æ–¥–Ω—è")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_reinforcement_question: {e}")

    async def send_weekly_homework(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø—è—Ç–Ω–∏—Ü–∞)
        """
        try:
            print(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                        weekly_topic = await self._get_weekly_topic_for_user(session, user)
                        
                        if weekly_topic:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                            try:
                                homework_text = await openai_client.generate_homework(
                                    current_topic={
                                        "title": weekly_topic.title,
                                        "description": weekly_topic.description,
                                        "tasks": json.loads(weekly_topic.tasks) if weekly_topic.tasks else []
                                    },
                                    conversation_history=[]  # –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –î–ó
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI: {e}")
                                # Fallback –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                                homework_text = f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ —ç—Å—Å–µ (5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –Ω–∞ —Ç–µ–º—É '{weekly_topic.title}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                            from text.text import homework_assigned_text
                            homework_message = homework_assigned_text.format(homework_text=homework_text)
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=homework_message
                            )
                            
                            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                        else:
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑—É—á–∞–ª —Ç–µ–º—É –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                            await self.bot.send_message(
                                chat_id=user.id,
                                text="üìö –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤—ã –Ω–µ –∏–∑—É—á–∞–ª–∏ –Ω–æ–≤—ã–µ —Ç–µ–º—ã. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ! üòä"
                            )
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_weekly_homework: {e}")

    async def start_new_week_topic(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ –≤ –Ω–∞—á–∞–ª–µ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        """
        try:
            print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        next_topic = await self._get_next_topic_for_user(session, user)
                        
                        if next_topic:
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
                            await session.execute(
                                update(User)
                                .where(User.id == user.id)
                                .values(current_topic_id=next_topic.id)
                            )
                            await session.commit()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç–µ–º–µ
                            message = f"üéØ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤–∞—è —Ç–µ–º–∞! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å: **{next_topic.title}**\n\n{next_topic.description}\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
                            
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=message
                            )
                            
                            print(f"‚úÖ –ù–æ–≤–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {next_topic.title}")
                        else:
                            # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                            await self.bot.send_message(
                                chat_id=user.id,
                                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å! üòä"
                            )
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_new_week_topic: {e}")

    async def _get_next_topic_for_user(self, session, user):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º
            progress_str = str(user.progress) if user.progress else "[]"
            completed_topics = json.loads(progress_str)
            
            # –ò—â–µ–º –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
            result = await session.execute(
                select(Topic)
                .where(Topic.id.notin_(completed_topics))
                .order_by(Topic.id)
                .limit(1)
            )
            
            return result.scalar_one_or_none()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            return None

    async def _get_today_topic_for_user(self, session, user):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            result = await session.execute(
                select(MessageHistory)
                .where(
                    MessageHistory.user_id == user.id,
                    MessageHistory.timestamp >= today
                )
                .order_by(MessageHistory.timestamp.desc())
                .limit(10)
            )
            
            today_messages = result.scalars().all()
            
            if today_messages:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
                if user.current_topic_id:
                    topic_result = await session.execute(
                        select(Topic).where(Topic.id == user.current_topic_id)
                    )
                    return topic_result.scalar_one_or_none()
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            return None

    async def _get_weekly_topic_for_user(self, session, user):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            today = datetime.now().date()
            start_of_week = today - timedelta(days=today.weekday())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            result = await session.execute(
                select(MessageHistory)
                .where(
                    MessageHistory.user_id == user.id,
                    MessageHistory.timestamp >= start_of_week
                )
                .order_by(MessageHistory.timestamp.desc())
                .limit(20)
            )
            
            weekly_messages = result.scalars().all()
            
            if weekly_messages:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
                if user.current_topic_id:
                    topic_result = await session.execute(
                        select(Topic).where(Topic.id == user.current_topic_id)
                    )
                    return topic_result.scalar_one_or_none()
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            return None

    async def _generate_reinforcement_question(self, topic):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        """
        try:
            system_prompt = """
            –¢—ã - —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ Marcus. –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
            
            –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
            - –ü—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º
            - –ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
            - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–º–µ —É—Ä–æ–∫–∞
            - –í—ã–ø–æ–ª–Ω–∏–º—ã–º –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—é
            
            –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
            - "What do you usually eat for breakfast?"
            - "How do you spend your weekends?"
            - "What is your favorite hobby?"
            - "Describe your best friend in one sentence."
            """
            
            user_prompt = f"""
            –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —Ç–µ–º–µ: "{topic.title}"
            
            –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã: {topic.description}
            
            –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—é.
            """
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
            
            response = await openai_client.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=50,
                temperature=0.7,
                timeout=30
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ: {e}")
            return f"What do you think about {topic.title}?"

    async def send_test_message(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_text = "üß™ Hello! This is a test message from the lesson scheduler. Everything is working correctly!"
            
            try:
                audio_bytes = await generate_speech(test_text)
                if audio_bytes:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
                    audio_path = await save_audio_to_file(audio_bytes, f"test_message_{user_id}.mp3")
                    if audio_path:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.bot.send_voice(
                            chat_id=user_id,
                            voice=FSInputFile(audio_path),
                            caption=test_text
                        )
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(audio_path)
                        except:
                            pass
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=test_text
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=test_text
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=user_id,
                    text=test_text
                )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
lesson_scheduler: Optional[LessonScheduler] = None 