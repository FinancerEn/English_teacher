import asyncio
import os
import json
from datetime import datetime, time
from typing import Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

from aiogram.types import FSInputFile
from database.engine import session_maker
from database.models import User, Topic
from sqlalchemy import select
from ai.ai import openai_client
from speech.whisper_engine import generate_speech, save_audio_to_file
from text.text import scheduled_lesson_text, homework_reminder_text

load_dotenv()

class LessonScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    """
    
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.timezone = os.getenv("TIMEZONE", "Asia/Shanghai")  # UTC+8
        self.lesson_time = os.getenv("LESSON_TIME", "12:00")
        self.group_id = os.getenv("GROUP_ID")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        self.test_mode = os.getenv("TEST_MODE", "false").lower() == "true"
        self.test_interval_minutes = int(os.getenv("TEST_INTERVAL_MINUTES", "960"))
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É—Ä–æ–∫–∞
        hour, minute = map(int, self.lesson_time.split(":"))
        self.lesson_time_obj = time(hour, minute)
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É—Ä–æ–∫–æ–≤...")
        
        if self.test_mode:
            print(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∫–∞–∂–¥—ã–µ {self.test_interval_minutes} –º–∏–Ω—É—Ç")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç)
            self.scheduler.add_job(
                self.send_lesson_reminder,
                'interval',
                minutes=self.test_interval_minutes,
                id="test_lesson",
                name=f"–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –∫–∞–∂–¥—ã–µ {self.test_interval_minutes} –º–∏–Ω—É—Ç",
                replace_existing=True
            )
        else:
            print(f"‚è∞ –í—Ä–µ–º—è —É—Ä–æ–∫–∞: {self.lesson_time} ({self.timezone})")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞
            self.scheduler.add_job(
                self.send_lesson_reminder,
                CronTrigger(hour=self.lesson_time_obj.hour, minute=self.lesson_time_obj.minute, timezone=self.timezone),
                id="daily_lesson",
                name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞)
            reminder_hour = (self.lesson_time_obj.hour + 2) % 24
            self.scheduler.add_job(
                self.send_homework_reminder,
                CronTrigger(hour=reminder_hour, minute=self.lesson_time_obj.minute, timezone=self.timezone),
                id="homework_reminder",
                name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏",
                replace_existing=True
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    
    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        """
        if self.scheduler.running:
            self.scheduler.shutdown()
            print("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def send_lesson_reminder(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        """
        try:
            print(f"üìö –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —É—Ä–æ–∫–µ –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        next_topic = await self._get_next_topic_for_user(session, user)
                        
                        if next_topic:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
                            try:
                                lesson_text = await openai_client.generate_lesson_start_message(
                                    topic_title=next_topic.title,
                                    topic_description=next_topic.description
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI: {e}")
                                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                                lesson_text = f"Hello! üëã My name is Marcus. Ready to learn about {next_topic.title}? Let's start our English lesson! (–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—É '{next_topic.title}'? –ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!)"
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user.current_topic_id = next_topic.id
                            await session.commit()
                        else:
                            # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                            lesson_text = "üéâ Congratulations! You've completed all topics! You're doing great! (–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!)"
                        
                        try:
                            audio_bytes = await generate_speech(lesson_text)
                            if audio_bytes:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
                                audio_path = await save_audio_to_file(audio_bytes, f"lesson_reminder_{user.id}.mp3")
                                if audio_path:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    await self.bot.send_voice(
                                        chat_id=user.id,
                                        voice=FSInputFile(audio_path),
                                        caption=lesson_text
                                    )
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(audio_path)
                                    except:
                                        pass
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                    await self.bot.send_message(
                                        chat_id=user.id,
                                        text=lesson_text
                                    )
                            else:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                await self.bot.send_message(
                                    chat_id=user.id,
                                    text=lesson_text
                                )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self.bot.send_message(
                                chat_id=user.id,
                                text=lesson_text
                            )
                        
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_lesson_reminder: {e}")
    
    async def _get_next_topic_for_user(self, session, user):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º
            progress_str = str(user.progress) if user.progress else "[]"
            completed_topics = json.loads(progress_str)
            
            # –ò—â–µ–º –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
            result = await session.execute(
                select(Topic)
                .where(Topic.id.notin_(completed_topics))
                .order_by(Topic.id)
                .limit(1)
            )
            
            return result.scalar_one_or_none()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            return None


    async def send_homework_reminder(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
        """
        try:
            print(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session_maker() as session:
                result = await session.execute(
                    select(User).where(User.id.isnot(None))
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞)
                        await self.bot.send_message(
                            chat_id=user.id,
                            text=homework_reminder_text
                        )
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_homework_reminder: {e}")


    async def send_test_message(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_text = "üß™ Hello! This is a test message from the lesson scheduler. Everything is working correctly!"
            
            try:
                audio_bytes = await generate_speech(test_text)
                if audio_bytes:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
                    audio_path = await save_audio_to_file(audio_bytes, f"test_message_{user_id}.mp3")
                    if audio_path:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.bot.send_voice(
                            chat_id=user_id,
                            voice=FSInputFile(audio_path),
                            caption=test_text
                        )
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(audio_path)
                        except:
                            pass
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=test_text
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=test_text
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=user_id,
                    text=test_text
                )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
lesson_scheduler: Optional[LessonScheduler] = None 