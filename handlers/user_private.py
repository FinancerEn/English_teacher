import json
import asyncio
from aiogram.types import FSInputFile, InputMediaAudio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, Voice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from text.text import (
    welcome_text, return_welcome_text, voice_error_text, start_first_text,
    all_topics_completed_text, openai_error_text, homework_assigned_text,
    homework_error_text, homework_completed_text, send_voice_text
)

from database.models import User, Topic, MessageHistory, Homework
from ai.ai import openai_client
from speech.whisper_engine import transcribe_audio, generate_speech, save_audio_to_file
from handlers.sending_data import (
    save_lesson_dialog, save_homework, send_lesson_summary_to_group,
    send_homework_response_to_group, get_lesson_dialogs, update_homework_answer
)

router_user_private = Router()


class LessonState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    waiting_for_voice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    in_lesson = State()          # –í –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Ä–æ–∫–∞
    waiting_for_correction = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
    lesson_completed = State()   # –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è
waiting_timers = {}


@router_user_private.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    result = await session.execute(
        select(User).where(User.id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            id=user_id,
            progress="[]"
        )
        session.add(user)
        await session.commit()
        
        message_text = welcome_text
    else:
        message_text = return_welcome_text
    
    await message.answer(message_text)

@router_user_private.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = message.from_user.id
    voice = message.voice
    
    if not voice:
        await message.answer(voice_error_text)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if user_id in waiting_timers:
        waiting_timers[user_id].cancel()
        del waiting_timers[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lesson_iteration = data.get("lesson_iteration", 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User).where(User.id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer(start_first_text)
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        file = await message.bot.get_file(voice.file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            temp_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_path, temp_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI Whisper
        try:
            user_text = await transcribe_audio(temp_path)
            if not user_text.strip():
                user_text = "Hello, teacher!"  # Fallback –µ—Å–ª–∏ Whisper –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ OpenAI Whisper: {e}")
            user_text = "Hello, teacher!"  # Fallback
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except:
            pass
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        user_text = "Hello, teacher!"  # Fallback
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    current_topic = None
    if user and user.current_topic_id:
        topic_result = await session.execute(
            select(Topic).where(Topic.id == user.current_topic_id)
        )
        current_topic = topic_result.scalar_one_or_none()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é
    if not current_topic:
        current_topic = await get_next_topic(session, user)
        if current_topic:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ update
            await session.execute(
                update(User)
                .where(User.id == user_id)
                .values(current_topic_id=current_topic.id)
            )
            await session.commit()
    
    if not current_topic:
        await message.answer(all_topics_completed_text)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
    history_result = await session.execute(
        select(MessageHistory)
        .where(MessageHistory.user_id == user_id)
        .order_by(MessageHistory.timestamp.desc())
        .limit(20)
    )
    history_messages = history_result.scalars().all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OpenAI
    conversation_history = []
    for msg in reversed(history_messages):  # –í —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        conversation_history.append({
            "role": str(msg.role),
            "content": str(msg.content)
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –≤—Ç–æ—Ä–∞—è
    if lesson_iteration == 1:
        # –ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –¥–∞—ë–º —Å–æ–≤–µ—Ç—ã
        await handle_first_iteration(message, state, session, user_id, user_text, current_topic, conversation_history, voice.file_id)
    else:
        # –í—Ç–æ—Ä–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await handle_second_iteration(message, state, session, user_id, user_text, current_topic, conversation_history, voice.file_id)


async def handle_first_iteration(message: Message, state: FSMContext, session: AsyncSession, user_id: int, user_text: str, current_topic: Topic, conversation_history: list, voice_file_id: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —É—Ä–æ–∫–∞
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        ai_response, feedback = await openai_client.generate_intelligent_response(
            user_message=user_text,
            conversation_history=conversation_history,
            current_topic={
                "title": str(current_topic.title),
                "description": str(current_topic.description),
                "tasks": json.loads(str(current_topic.tasks))
            }
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI: {e}")
        ai_response = "I'm sorry, there was an error. Please try again later."
        feedback = {
            "is_correct": True,
            "feedback": "–û—Ç–ª–∏—á–Ω–æ! üëç",
            "correct_answer": user_text,
            "explanation": ""
        }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    response_text = f"üí° –°–æ–≤–µ—Ç\n\n{feedback.get('feedback', '')}\n\n"
    if not feedback.get('is_correct', True):
        response_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {feedback.get('correct_answer', '')}\n\n"
        response_text += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {feedback.get('explanation', '')}\n\n"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è
    try:
        audio_bytes = await generate_speech(ai_response)
        if audio_bytes:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
            audio_path = await save_audio_to_file(audio_bytes, f"teacher_response_{user_id}.mp3")
            if audio_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.bot.send_voice(
                    chat_id=user_id,
                    voice=FSInputFile(audio_path),
                    caption=ai_response
                )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(audio_path)
                except:
                    pass
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(ai_response)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(ai_response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(ai_response)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await message.answer(response_text)
    
    # –°–æ–∑–¥–∞—ë–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="work_on_errors")]
    ])
    await message.answer("–ü–æ–≤—Ç–æ—Ä–∏–º?", reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_lesson_dialog(
        session=session,
        user_id=user_id,
        user_message=user_text,
        ai_response=ai_response,
        voice_file_id=voice_file_id
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
    await session.execute(
        update(User)
        .where(User.id == user_id)
        .values(last_lesson_date=datetime.utcnow())
    )
    
    await session.commit()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è (3 –º–∏–Ω—É—Ç—ã)
    await set_waiting_timer(message, user_id, 3, "first_reminder", session)

async def handle_second_iteration(message: Message, state: FSMContext, session: AsyncSession, user_id: int, user_text: str, current_topic: Topic, conversation_history: list, voice_file_id: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —É—Ä–æ–∫–∞
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª—è –≤—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    try:
        ai_response, feedback = await openai_client.generate_intelligent_response(
            user_message=user_text,
            conversation_history=conversation_history,
            current_topic={
                "title": str(current_topic.title),
                "description": str(current_topic.description),
                "tasks": json.loads(str(current_topic.tasks))
            }
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        feedback = {
            "is_correct": True,
            "feedback": "–û—Ç–ª–∏—á–Ω–æ! üëç –í—ã —É–ª—É—á—à–∏–ª–∏—Å—å!",
            "correct_answer": user_text,
            "explanation": ""
        }
        ai_response = "Great job! You've improved a lot!"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
    await message.answer(ai_response)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    response_text = f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏\n\n{feedback.get('feedback', '')}\n\n"
    if not feedback.get('is_correct', True):
        response_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {feedback.get('correct_answer', '')}\n\n"
        response_text += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {feedback.get('explanation', '')}\n\n"
    
    await message.answer(response_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_lesson_dialog(
        session=session,
        user_id=user_id,
        user_message=user_text,
        ai_response="Second iteration feedback",
        voice_file_id=voice_file_id
    )
    
    await session.commit()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –∏ –≤—ã–¥–∞—ë–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    await give_homework(message, state, session, user_id, current_topic, conversation_history)


@router_user_private.callback_query(F.data == "work_on_errors")
async def work_on_errors_callback(callback, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏"
    """
    user_id = callback.from_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if user_id in waiting_timers:
        waiting_timers[user_id].cancel()
        del waiting_timers[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    await state.update_data(lesson_iteration=2)
    await state.set_state(LessonState.waiting_for_voice)
    
    await callback.message.answer("üé§ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ –∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")


async def set_waiting_timer(message: Message, user_id: int, minutes: int, reminder_type: str, session: AsyncSession):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
    """
    async def send_reminder():
        try:
            if reminder_type == "first_reminder":
                await message.bot.send_message(
                    chat_id=user_id,
                    text="–≠–π! –ú—ã —Ç–∞–∫ –∫–ª–∞—Å—Å–Ω–æ –æ–±—â–∞–ª–∏—Å—å. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º? üöÄ"
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä (–µ—â—ë 2 –º–∏–Ω—É—Ç—ã)
                await set_waiting_timer(message, user_id, 2, "final_reminder", session)
            elif reminder_type == "final_reminder":
                await message.bot.send_message(
                    chat_id=user_id,
                    text="üèÅ –ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å! üòä"
                )
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫
                await finish_lesson_early(message, user_id, session)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            if user_id in waiting_timers:
                del waiting_timers[user_id]
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–π–º–µ—Ä
    timer = asyncio.create_task(asyncio.sleep(minutes * 60))
    waiting_timers[user_id] = timer
    
    try:
        await timer
        await send_reminder()
    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω
        pass


async def finish_lesson_early(message: Message, user_id: int, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —É—Ä–æ–∫ –¥–æ—Å—Ä–æ—á–Ω–æ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_result = await session.execute(
            select(User).where(User.id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        history_result = await session.execute(
            select(MessageHistory)
            .where(MessageHistory.user_id == user_id)
            .order_by(MessageHistory.timestamp.desc())
            .limit(5)
        )
        recent_messages = history_result.scalars().all()
        
        # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        conversation_summary = "–£—Ä–æ–∫ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞"
        if recent_messages:
            topics = [msg.content[:50] + "..." for msg in recent_messages[:3]]
            conversation_summary = f"–û–±—Å—É–∂–¥–∞–ª–∏: {', '.join(topics)}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = message.from_user.full_name or "—É—á–µ–Ω–∏–∫"
        end_message = await openai_client.generate_lesson_end_message(
            conversation_summary=conversation_summary,
            user_name=user_name
        )
        
        await message.bot.send_message(
            chat_id=user_id,
            text=end_message
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ö–æ—Ä–æ—à–æ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è, –∏ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –µ—â–µ –ª—É—á—à–µ! üòä"
        )

async def get_next_topic(session: AsyncSession, user: User):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º
    if not user:
        return None
    
    progress_str = str(user.progress) if user.progress else "[]"
    completed_topics = json.loads(progress_str)
    
    # –ò—â–µ–º –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
    result = await session.execute(
        select(Topic)
        .where(Topic.id.notin_(completed_topics))
        .order_by(Topic.id)
        .limit(1)
    )
    
    return result.scalar_one_or_none()

async def give_homework(
    message: Message, 
    state: FSMContext,
    session: AsyncSession, 
    user_id: int, 
    current_topic: Topic, 
    conversation_history: list
):
    """
    –í—ã–¥–∞—ë—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        homework_text = await openai_client.generate_homework(
            current_topic={
                "title": str(current_topic.title),
                "description": str(current_topic.description),
                "tasks": json.loads(str(current_topic.tasks))
            },
            conversation_history=conversation_history
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
        await save_homework(
            session=session,
            user_id=user_id,
            topic_id=current_topic.id,
            homework_text=homework_text
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if user and user.id:
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é
            progress_str = str(user.progress) if user.progress else "[]"
            completed_topics = json.loads(progress_str)
            completed_topics.append(current_topic.id)
            new_progress = json.dumps(completed_topics)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(
                update(User)
                .where(User.id == user_id)
                .values(
                    progress=new_progress,
                    current_topic_id=None
                )
            )
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        homework_message = homework_assigned_text.format(homework_text=homework_text)
        await message.answer(homework_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —É—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        lesson_dialogs = await get_lesson_dialogs(session, user_id, limit=20)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —É—Ä–æ–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        await send_lesson_summary_to_group(
            bot=message.bot,
            user_id=user_id,
            user_name=message.from_user.full_name,
            lesson_dialogs=lesson_dialogs,
            homework_text=homework_text
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")

@router_user_private.message(Command("test_scheduler"))
async def cmd_test_scheduler(message: Message):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from app import lesson_scheduler
        
        if lesson_scheduler:
            await lesson_scheduler.send_test_message(message.from_user.id)
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router_user_private.message(Command("dev_mode"))
async def cmd_dev_mode(message: Message):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        from speech.whisper_engine import DEV_MODE
        
        if DEV_MODE:
            await message.answer(
                "üîß –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: –†–ê–ó–†–ê–ë–û–¢–ö–ê\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏\n"
                "‚Ä¢ OpenAI API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
                "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞\n\n"
                "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env\n"
                "2) –ò–∑–º–µ–Ω–∏—Ç–µ DEV_MODE = False –≤ speech/whisper_engine.py"
            )
        else:
            await message.answer(
                "üöÄ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: –ü–†–û–î–ê–ö–®–ï–ù\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏\n"
                "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY\n"
                "‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router_user_private.message(Command("status"))
async def cmd_status(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    try:
        import os
        from speech.whisper_engine import DEV_MODE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token_exists = bool(os.getenv("TOKEN"))
        openai_key_exists = bool(os.getenv("OPENAI_API_KEY"))
        group_id_exists = bool(os.getenv("GROUP_ID"))
        db_url_exists = bool(os.getenv("DB_URL"))
        
        status_text = f"""
üîç –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

üì± Telegram Bot: {'‚úÖ' if token_exists else '‚ùå'}
ü§ñ OpenAI API: {'‚úÖ' if openai_key_exists else '‚ùå'}
üë• Group ID: {'‚úÖ' if group_id_exists else '‚ùå'}
üóÑÔ∏è Database: {'‚úÖ' if db_url_exists else '‚ùå'}

üé§ –†–µ–∂–∏–º —Ä–µ—á–∏: {'üîß –†–ê–ó–†–ê–ë–û–¢–ö–ê' if DEV_MODE else 'üöÄ –ü–†–û–î–ê–ö–®–ï–ù'}

"""
        
        if not all([token_exists, openai_key_exists, group_id_exists, db_url_exists]):
            status_text += "\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n–°–º. SETUP_PRODUCTION.md"
        
        if DEV_MODE:
            status_text += "\nüí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç–µ DEV_MODE = False"
        else:
            status_text += "\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!"
        
        await message.answer(status_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@router_user_private.message(F.text)
async def handle_text_message(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π)
    """
    user_id = message.from_user.id
    text_content = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    result = await session.execute(
        select(Homework)
        .where(
            Homework.user_id == user_id,
            Homework.is_checked == False
        )
        .order_by(Homework.date_assigned.desc())
        .limit(1)
    )
    
    homework = result.scalar_one_or_none()
    
    if homework:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        topic_result = await session.execute(
            select(Topic).where(Topic.id == homework.topic_id)
        )
        topic = topic_result.scalar_one_or_none()
        topic_title = topic.title if topic else "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
        try:
            homework_check = await openai_client.check_homework(
                homework_text=homework.task_text,
                student_answer=text_content,
                topic_title=topic_title
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
            score = homework_check.get('score', 5)
            feedback = homework_check.get('feedback', '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!')
            grade_description = homework_check.get('grade_description', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ')
            
            response_text = f"""
üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è

üéØ –û—Ü–µ–Ω–∫–∞: {score}/10 ({grade_description})

üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:
{feedback}

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            grammar_errors = homework_check.get('grammar_errors', [])
            if grammar_errors:
                response_text += f"\n‚ùå –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                for error in grammar_errors:
                    response_text += f"‚Ä¢ {error}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –∑–∞–ø–∞—Å—É
            vocabulary_notes = homework_check.get('vocabulary_notes', '')
            if vocabulary_notes:
                response_text += f"\nüìö –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å:\n{vocabulary_notes}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            suggestions = homework_check.get('suggestions', [])
            if suggestions:
                response_text += f"\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n"
                for suggestion in suggestions:
                    response_text += f"‚Ä¢ {suggestion}\n"
            
            await message.answer(response_text)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è! –Ø –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –∏ –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        updated_homework = await update_homework_answer(
            session=session,
            user_id=user_id,
            answer_text=text_content
        )
        
        if updated_homework:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –î–ó –≤ –≥—Ä—É–ø–ø—É
            await send_homework_response_to_group(
                bot=message.bot,
                user_id=user_id,
                user_name=message.from_user.full_name,
                homework_text=updated_homework.task_text,
                user_answer=text_content
            )
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫!") 