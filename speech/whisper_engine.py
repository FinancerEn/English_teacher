import asyncio
import json
import os
import tempfile
import logging
from pathlib import Path
from typing import Optional

from ai.ai import openai_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
VOICE_CACHE_DIR = Path(__file__).parent / "voice_cache"
VOICE_CACHE_DIR.mkdir(exist_ok=True)

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ OpenAI API)
DEV_MODE = False  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ OpenAI API

async def transcribe_audio(audio_path: str) -> str:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI Whisper.
    
    Args:
        audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Returns:
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    
    if DEV_MODE:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        return "Hello, teacher! I am ready for the English lesson."
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        transcribed_text = await openai_client.transcribe_audio(audio_path)
        
        if not transcribed_text.strip():
            transcribed_text = "Hello, teacher! I am ready for the English lesson."
        
        logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{transcribed_text}'")
        return transcribed_text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return "Hello, teacher! I am ready for the English lesson."

async def generate_speech(text: str) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI TTS.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        –ë–∞–π—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    """
    
    if DEV_MODE:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞–π—Ç—ã
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è TTS")
        return b""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
        audio_bytes = await openai_client.generate_speech(text)
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—á—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{text[:50]}...'")
        return audio_bytes
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
        return b""

async def save_audio_to_file(audio_bytes: bytes, filename: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –±–∞–π—Ç—ã –≤ —Ñ–∞–π–ª.
    
    Args:
        audio_bytes: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    
    if not audio_bytes:
        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –±–∞–π—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        return ""
    
    try:
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
            temp_path = temp_file.name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –±–∞–π—Ç—ã –≤ —Ñ–∞–π–ª
        with open(temp_path, 'wb') as f:
            f.write(audio_bytes)
        
        logger.info(f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {temp_path}")
        return temp_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
        return ""

def get_voice_cache_dir() -> Path:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫—ç—à–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
    
    Returns:
        –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫—ç—à–∞
    """
    return VOICE_CACHE_DIR

def cleanup_temp_files():
    """
    –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫—ç—à–µ.
    """
    try:
        for file_path in VOICE_CACHE_DIR.glob("*.mp3"):
            try:
                file_path.unlink()
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def load_model() -> None:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    logger.info("üîß load_model() - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")

def get_model():
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    logger.info("üîß get_model() - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    return None

def get_ffmpeg_path() -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    logger.info("üîß get_ffmpeg_path() - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    return "ffmpeg"

def convert_audio(input_path: str, output_path: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    logger.info("üîß convert_audio() - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    return output_path

def recognize_audio(path_to_ogg: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    logger.info("üîß recognize_audio() - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    return "Hello, teacher! I am ready for the English lesson." 