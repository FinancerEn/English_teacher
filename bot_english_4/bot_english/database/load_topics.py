import json
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.engine import engine, session_maker
from database.models import Topic, Base

# Список тем из школьной программы
topics = [
    {
        "title": "Взаимоотношения в семье и с друзьями",
        "description": "Формирование умения общаться в устной и письменной форме. Изучение лексики по теме семьи и дружбы.",
        "tasks": [
            "Опиши свою семью на английском",
            "Расскажи о своём друге",
            "Обсуди семейные традиции"
        ]
    },
    {
        "title": "Внешность и характер человека",
        "description": "Описание внешности и характера литературного персонажа. Изучение прилагательных для описания людей.",
        "tasks": [
            "Опиши внешность своего друга",
            "Расскажи о характере любимого героя",
            "Сравни двух персонажей"
        ]
    },
    {
        "title": "Досуг и увлечения",
        "description": "Изучение хобби и увлечений современного подростка: чтение, кино, театр, спорт, музыка.",
        "tasks": [
            "Расскажи о своих увлечениях",
            "Опиши любимый фильм",
            "Обсуди музыкальные предпочтения"
        ]
    },
    {
        "title": "Здоровый образ жизни",
        "description": "Режим труда и отдыха, фитнес, сбалансированное питание, посещение врача.",
        "tasks": [
            "Расскажи о своём распорядке дня",
            "Опиши здоровые привычки",
            "Обсуди правильное питание"
        ]
    },
    {
        "title": "Покупки и деньги",
        "description": "Покупки одежды, обуви и продуктов питания. Карманные деньги и их использование.",
        "tasks": [
            "Опиши поход в магазин",
            "Расскажи о своих покупках",
            "Обсуди управление карманными деньгами"
        ]
    },
    {
        "title": "Школа и образование",
        "description": "Школьная жизнь, школьная форма, изучаемые предметы и отношение к ним.",
        "tasks": [
            "Опиши свой школьный день",
            "Расскажи о любимых предметах",
            "Обсуди школьные правила"
        ]
    },
    {
        "title": "Путешествия и транспорт",
        "description": "Виды отдыха в различное время года. Путешествия по России и иностранным странам.",
        "tasks": [
            "Опиши своё путешествие",
            "Расскажи о транспорте",
            "Планируй поездку"
        ]
    },
    {
        "title": "Природа и экология",
        "description": "Флора и фауна. Проблемы экологии. Климат и погода.",
        "tasks": [
            "Опиши природу вокруг",
            "Обсуди экологические проблемы",
            "Расскажи о погоде"
        ]
    },
    {
        "title": "Средства массовой информации",
        "description": "Телевидение, радио, пресса, Интернет. Использование медиа в повседневной жизни.",
        "tasks": [
            "Расскажи о любимых СМИ",
            "Обсуди роль интернета",
            "Опиши новости"
        ]
    },
    {
        "title": "Страны и культуры",
        "description": "Родная страна и страна изучаемого языка. Географическое положение, столицы, достопримечательности.",
        "tasks": [
            "Опиши свою страну",
            "Расскажи о Великобритании",
            "Сравни культуры"
        ]
    }
]

async def load_topics():
    # Создаём таблицы, если их нет
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    async with session_maker() as session:
        for topic in topics:
            t = Topic(
                title=topic["title"],
                description=topic["description"],
                tasks=json.dumps(topic["tasks"]),  # Сохраняем список как строку
                is_completed=False
            )
            session.add(t)
        await session.commit()
    print("Темы успешно загружены!")

if __name__ == "__main__":
    asyncio.run(load_topics())