from aiogram.types import Message
import os
import asyncio
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, types
from database.models import MessageHistory, Homework
from aiogram import exceptions as tg_exceptions
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

load_dotenv()

GROUP_ID_ENV = os.getenv("GROUP_ID")
if not GROUP_ID_ENV:
    print("‚ö†Ô∏è GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    GROUP_ID = None
else:
    try:
        GROUP_ID: int = int(GROUP_ID_ENV)
    except ValueError:
        print(f"‚ö†Ô∏è GROUP_ID –≤ .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –∞ –Ω–µ {GROUP_ID_ENV!r}")
        GROUP_ID = None


async def save_lesson_dialog(session: AsyncSession, user_id: int, user_message: str, ai_response: str, voice_file_id: str = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        new_message = MessageHistory(
            user_id=user_id,
            role="user",
            content=user_message,
            voice_file_id=voice_file_id,
            timestamp=datetime.utcnow()
        )
        session.add(new_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        ai_message = MessageHistory(
            user_id=user_id,
            role="bot",
            content=ai_response,
            voice_file_id=None,
            timestamp=datetime.utcnow()
        )
        session.add(ai_message)
        await session.commit()
        print(f"‚úÖ –î–∏–∞–ª–æ–≥ —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        await session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        return False


async def save_homework(session: AsyncSession, user_id: int, topic_id: int, homework_text: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        new_homework = Homework(
            user_id=user_id,
            topic_id=topic_id,
            task_text=homework_text,
            answer_text=None,  # –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
            is_checked=False,
            is_passed=False,
            date_assigned=datetime.utcnow()
        )
        session.add(new_homework)
        await session.commit()
        print(f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        await session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False


async def send_lesson_summary_to_group(bot: Bot, user_id: int, user_name: str, lesson_dialogs: list, homework_text: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram-–≥—Ä—É–ø–ø—É —Å–≤–æ–¥–∫—É —É—Ä–æ–∫–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
    """
    if not GROUP_ID:
        print("‚ö†Ô∏è GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞
        header_message = (
            f"üìö –ó–ê–í–ï–†–®–ï–ù –£–†–û–ö –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û –Ø–ó–´–ö–ê\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(lesson_dialogs)}\n"
            f"{'='*40}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await bot.send_message(
            chat_id=GROUP_ID,
            text=header_message,
            parse_mode=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏
        for i, dialog in enumerate(lesson_dialogs, 1):
            dialog_text = (
                f"üí¨ –î–∏–∞–ª–æ–≥ #{i}\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {dialog['user_message'][:100]}{'...' if len(dialog['user_message']) > 100 else ''}\n"
                f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {dialog['ai_response'][:100]}{'...' if len(dialog['ai_response']) > 100 else ''}\n"
                f"‚è∞ –í—Ä–µ–º—è: {dialog['timestamp'].strftime('%H:%M:%S')}\n"
                f"{'-'*30}"
            )
            
            await bot.send_message(
                chat_id=GROUP_ID,
                text=dialog_text,
                parse_mode=None
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if homework_text:
            homework_message = (
                f"üìù –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {user_name}\n"
                f"üÜî ID: {user_id}\n"
                f"üìã –ó–∞–¥–∞–Ω–∏–µ:\n{homework_text}\n"
                f"{'='*40}"
            )
            
            await bot.send_message(
                chat_id=GROUP_ID,
                text=homework_message,
                parse_mode=None
            )
        
        print(f"‚úÖ –°–≤–æ–¥–∫–∞ —É—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except tg_exceptions.TelegramBadRequest as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        if "chat not found" in str(e).lower():
            print(f"–ì—Ä—É–ø–ø–∞ —Å ID {GROUP_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        elif "bot was blocked" in str(e).lower():
            print("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ")
        elif "chat is deactivated" in str(e).lower():
            print("–ì—Ä—É–ø–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")


async def send_homework_response_to_group(bot: Bot, user_id: int, user_name: str, homework_text: str, user_answer: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram-–≥—Ä—É–ø–ø—É –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
    """
    if not GROUP_ID:
        print("‚ö†Ô∏è GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return
    
    try:
        homework_response_message = (
            f"üìù –û–¢–í–ï–¢ –ù–ê –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìã –ó–∞–¥–∞–Ω–∏–µ:\n{homework_text[:200]}{'...' if len(homework_text) > 200 else ''}\n"
            f"‚úèÔ∏è –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:\n{user_answer[:300]}{'...' if len(user_answer) > 300 else ''}\n"
            f"{'='*40}"
        )
        
        await bot.send_message(
            chat_id=GROUP_ID,
            text=homework_response_message,
            parse_mode=None
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except tg_exceptions.TelegramBadRequest as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –î–ó: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –î–ó: {e}")


async def get_lesson_dialogs(session: AsyncSession, user_id: int, limit: int = 10) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        result = await session.execute(
            select(MessageHistory)
            .where(MessageHistory.user_id == user_id)
            .order_by(MessageHistory.timestamp.desc())
            .limit(limit)
        )
        messages = result.scalars().all()
        
        dialogs = []
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞ –≤ –ø–∞—Ä—ã
        user_messages = [msg for msg in messages if msg.role == "user"]
        bot_messages = [msg for msg in messages if msg.role == "bot"]
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤
        for i in range(min(len(user_messages), len(bot_messages))):
            dialogs.append({
                'user_message': user_messages[i].content,
                'ai_response': bot_messages[i].content,
                'timestamp': user_messages[i].timestamp
            })
        
        return dialogs
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return []


async def update_homework_answer(session: AsyncSession, user_id: int, answer_text: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        result = await session.execute(
            select(Homework)
            .where(
                Homework.user_id == user_id,
                Homework.is_checked == False
            )
            .order_by(Homework.date_assigned.desc())
            .limit(1)
        )
        homework = result.scalar_one_or_none()
        
        if homework:
            homework.answer_text = answer_text
            homework.is_checked = True
            homework.date_checked = datetime.utcnow()
            homework.is_passed = True  # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ò–ò
            
            await session.commit()
            print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return homework
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –î–ó –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
    except Exception as e:
        await session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –î–ó: {e}")
        return None 