#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö English Tutor Bot
"""

import asyncio
import json
from database.engine import session_maker
from database.models import Topic, User, MessageHistory, Homework
from sqlalchemy import select

async def view_database():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    async with session_maker() as session:
        print("=" * 60)
        print("üìö –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ENGLISH TUTOR BOT")
        print("=" * 60)
        
        # 1. –¢–µ–º—ã —É—Ä–æ–∫–æ–≤
        print("\nüéØ –¢–ï–ú–´ –£–†–û–ö–û–í:")
        print("-" * 30)
        result = await session.execute(select(Topic))
        topics = result.scalars().all()
        
        if not topics:
            print("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python database/load_topics.py")
        else:
            for i, topic in enumerate(topics, 1):
                print(f"\n{i}. {topic.title}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic.description}")
                tasks = json.loads(topic.tasks) if topic.tasks else []
                print(f"   –ó–∞–¥–∞–Ω–∏—è: {', '.join(tasks)}")
                print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if topic.is_completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
        
        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print("\n\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
        print("-" * 30)
        result = await session.execute(select(User))
        users = result.scalars().all()
        
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for user in users:
                print(f"\nID: {user.id}")
                print(f"   –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {user.current_topic_id or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {user.last_lesson_date or '–ù–µ—Ç'}")
                progress = json.loads(user.progress) if user.progress else []
                print(f"   –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {len(progress)} –∏–∑ {len(topics)}")
                print(f"   –°–æ–∑–¥–∞–Ω: {user.created_at}")
        
        # 3. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        print("\n\nüí¨ –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:")
        print("-" * 30)
        result = await session.execute(
            select(MessageHistory)
            .order_by(MessageHistory.timestamp.desc())
            .limit(10)
        )
        messages = result.scalars().all()
        
        if not messages:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for msg in messages:
                role_emoji = "üë§" if msg.role == "user" else "ü§ñ"
                print(f"{role_emoji} [{msg.timestamp}] {msg.content[:50]}...")
        
        # 4. –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        print("\n\nüìù –î–û–ú–ê–®–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø:")
        print("-" * 30)
        result = await session.execute(select(Homework))
        homeworks = result.scalars().all()
        
        if not homeworks:
            print("‚ùå –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for hw in homeworks:
                status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ" if hw.is_checked else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                print(f"\n–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hw.user_id}")
                print(f"   –¢–µ–º–∞: {hw.topic_id}")
                print(f"   –ó–∞–¥–∞–Ω–∏–µ: {hw.task_text[:50]}...")
                print(f"   –û—Ç–≤–µ—Ç: {hw.answer_text[:50] if hw.answer_text else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}...")
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   –í—ã–¥–∞–Ω–æ: {hw.date_assigned}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(view_database()) 